<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--此处namespace要写所对应的实体类的全限定名，指明所对应的Mapper接口-->
<mapper namespace="com.aalto.myBBS.dao.MessageMapper">

    <sql id = "selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id = "insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
            select max(id) as maxid from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m
    </select>

    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <!--不加conversation_id 时，查询所有会话中未读消息的数量。加了conversation_id 时，查询某一个会话中未读消息的数量-->
    <!--注意此处需要判断to_id为用户userId-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <insert id="insertMessage" parameterType = "Message" keyProperty = "id">
        insert into message(<include refid="insertFields"/>)
        values(#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <!--此处使用MyBatis遍历集合-->
    <update id = "updateStatus">
        update message set status = #{status}
        where id in
        <!--ids是所要遍历的集合，id是每次遍历时使用的变量-->
        <foreach collection="ids" item="id" open = "(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>