<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--此处namespace要写所对应的实体类的全限定名-->
<mapper namespace="com.aalto.myBBS.dao.UserMapper">
    <sql id="selectFields">
        id, username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <!--此处Id要写其对应的接口中的方法名, resultType中是返回数据的类型, #{id}代表方法中的参数-->
    <select id="selectById" resultType="com.aalto.myBBS.service.entity.User">
        select <include refid="selectFields"/>
        from user
        where id = #{id}
    </select>

    <select id="selectByName" resultType="com.aalto.myBBS.service.entity.User">
        select <include refid="selectFields"/>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="com.aalto.myBBS.service.entity.User">
        select <include refid="selectFields"/>
        from user
        where email = #{email}
    </select>

    <!--使用parameterType来声明参数类型, keyProperty声明主键名, 注意不用写id, 因为其是自动生成的-->
    <insert id="insertUser" parameterType="com.aalto.myBBS.service.entity.User" keyProperty="id">
        insert into user (<include refid="insertFields"/>)
        values (#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime})
    </insert>
    <!--注意, 简单的数据类型是不用声明的-->
    <update id="updateStatus">
        update user set status = #{status} where id = #{id}
    </update>

    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>
</mapper>